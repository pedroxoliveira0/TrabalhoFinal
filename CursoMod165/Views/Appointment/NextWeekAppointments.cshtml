<!-- indica que vai usar o model Staff -->
@model IEnumerable<CursoMod165.Models.Appointment>
<!--  IEnumera.. é uma lista!   -->
@{
    bool dateExists = ViewBag.StartDate != null;

}


<!-- "?" quer dizer que só faz se existir  a variavel -->
<h1>Next Week's Appointments 
    @if (dateExists)
    {
        <span>
            (@ViewBag.StartDate?.ToShortDateString() - @ViewBag.EndDate?.ToShortDateString())
        </span>
    }
</h1>

<p>
    <!--  a proxima linha faz uma acção; cria a opcao de criar um novo customer   -->
    <!--  Vai para a pagina create Staff se for primido  -->
    <!-- <a class="btn btn-outline-primary" asp-action="Create">Create New</a>  -->
    <a asp-action="Create">Create New</a>
</p>

<p>

    <!-- <a asp-action="Check tomorrow's Appointments'" class="btn btn-primary">Next Week's Appointments</a> -->
    <a asp-action="TomorrowsAppointments" class="btn btn-primary">Check tomorror's Appointments</a>
    
    @* Razor corre do lado do servidor *@
    @* Atencao se um botao estiver escondiddo pode se colocar activo isto é uma quebra de seguranca e  noa deve acontecer*@
    @* logo Os testes de seguranca dever ser feitos do lado do servidor *@
    @* Só aparece o cabecalho staff se tiver credenciado para tal, "ADMIN" é substituido ..ROLES.ADMIN *@
    @if(User.IsInRole(CursoMod165Constants.ROLES.ADMIN))
    {
        <a asp-action="EmailReminderNextWeekAppointments" class="btn btn-warning">Send Reminder E-mail</a>
        <!--  tenho de criar no controlador o codigo que vai tratar deste botao ... envio de emails -->
    }

    
    
</p>



<!-- aqui adicionamos o modelo grid-->
<!-- ("{0:dd-MM-yyyy}"); // vai buscar o formato definido no sistema -->
<!-- fazer o mesmo na tabela tomorrow appointments -->
<!-- fazere como TPC next week appointment-->
@(
Html
        .Grid(Model)   
        .Build(columns =>
        {
            columns.Add(ap => ap.Number).Titled("Ap. Number");
            columns.Add(ap => ap.Date).Titled("Date").Formatted("{0:dd-MM-yyyy}")
                                                     .Filterable(GridFilterType.Double);   // aplicacao de filtro duplo
            columns.Add(ap => ap.Time).Titled("Time").Formatted("{0:t}");
            columns.Add(ap => ap.Customer.Name).Titled("Customer");
            columns.Add(ap => ap.Staff.Name).Titled("Staff")
                .RenderedAs(ap => $"{ap.Staff.Name} [${ap.Staff.StaffRole.Name}]");
            columns.Add(ap => ap.Staff.StaffRole.Name).Titled("Staff Role");
            columns.Add(ap => ap.IsDone).Titled("Done?")
                .RenderedAs(ap => (ap.IsDone == true ? "Yes" : "No"))
                .UsingFilterOptions(new[]
                {
                    new SelectListItem{ Value = "true", Text = "Yes" },
                    new SelectListItem{ Value = "false", Text = "No" }
                });

            columns.Add(ap => Html.ActionLink("Edit", "Edit", new { id = ap.ID }, new{@class="btn btn-primary"}));
            @* columns.Add(Model => Model.ID).RendeedAs(Model =>
                Html.ActionLink("Edit", "Edit", new { id = Model.ID })).Css("btn")
            *@  
            columns.Add(ap => 
                Html.ActionLink("Delete", "Delete", new { id = ap.ID }, new { @class = "btn btn-primary" }));

            })    
        .Filterable()
        .Sortable() 
)



<!-- Envio de emails para os utentes da Lista: este em principio nao esta bem ..., foi adicionado aqui para envio de emails para os utentes da Lista -->
<!-- esta é uma vista e eu não quero a vista eu quero é enviar um email para todos os que estão na lista que aparece no ecran -->


<!-- FIM Envio de emails para os utentes da Lista: -->