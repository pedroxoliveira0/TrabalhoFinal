<!-- indica que vai usar o model Appointment .Appointment-->
@model IEnumerable<CursoMod165.Models.Appointment>

<!--  IEnumera.. é uma lista!   -->

<h1>Tomorrow's Appointments</h1>

<p>
    <!--  a proxima linha faz uma acção; cria a opcao de criar um novo customer   -->
    <!--  Vai para a pagina create Staff se for primido  -->
    <!-- <a class="btn btn-outline-primary" asp-action="Create">Create New</a>  -->
    <a asp-action="Create">Create New</a>
</p>

<!--
<p>

    <a asp-action="TomorrowAppointments" class="btn btn-primary">Check tomorror's Appointments</a>
</p>
-->

<p>

    <a asp-action="NextWeekAppointments" class="btn btn-secondary">Check Next Week's Appointments</a>
</p>



<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Number)</th>  <!--   está só =  Aniversário   OK -->
            <th>Customer Name</th> <!--  Nome  OK -->
            <th>Staff Name</th> <!--  Nome  Ok -->
            <th>@Html.DisplayNameFor(model => model.Date)</th> <!-- OK -->
            <th>@Html.DisplayNameFor(model => model.Time)</th> <!-- OK -->
            <th>@Html.DisplayNameFor(model => model.IsDone)</th> <!-- OK -->
            
            <th>
                <!-- Aqui vamos criar/apresentar novos botoes no fim da tabela: apagar, modificar etc  -->
                Actions
            </th>
        </tr>
    </thead>

    <tbody>
        <!-- se a tabela estiver vazia apresenta informacao que esta vazia -->
        @if (!Model.Any())
        {
            <!-- OK até aqui -->
            <tr>No Data (There isn't any appointment for tomorrow) </tr>
        }
        <!-- para cada elemento do staff apresenta os seguintes campos -->
        <!-- Os campos tem de cuincidir com os de cima -->

        @foreach (var appointment in Model)
        {
            <tr>
                <td>
                    <!-- arroba staff.Name   ()estava com arroba junto do staff -->
                    @Html.DisplayFor(modelItem => appointment.Number)
                </td>
                <td>
                    <!-- arroba staff.Name -->
                    @Html.DisplayFor(modelItem => appointment.Customer.Name)
                </td>
                <td>
                    <!-- arroba staff.Name -->
                    @Html.DisplayFor(modelItem => appointment.Staff.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => appointment.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => appointment.Time)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => appointment.IsDone)
                </td>

                <td>
                    <!--  td é uma celula ou coluna na pagina html -->
                    <a class="btn btn-outline-success" asp-action="Details" asp-route-id="@appointment.ID">Details</a>
                    <a class="btn btn-outline-warning" asp-action="Edit" asp-route-id="@appointment.ID">Edit</a>
                    <a class="btn btn-outline-danger" asp-action="Delete" asp-route-id="@appointment.ID">Delete</a>

                </td>
            </tr>
        }
    </tbody>


</table>

<!-- mOSTRA das usando ferramenta grid -->
<!-- aqui adicionamos o modelo grid-->
<!-- ("{0:dd-MM-yyyy}"); // vai buscar o formato definido no sistema -->
<!-- fazer o mesmo na tabela tomorrow appointments -->
<!-- fazere como TPC next week appointment-->
@(
Html
        .Grid(Model)
        .Build(columns =>
        {
            columns.Add(ap => ap.Number).Titled("Ap. Number");
            columns.Add(ap => ap.Date).Titled("Date").Formatted("{0:dd-MM-yyyy}")
                                                     .Filterable(GridFilterType.Double);   // aplicacao de filtro duplo
                                                     //.RenderedAs(ap => (ap.Date == DateTime.Now.AddDays(1)));
            columns.Add(ap => ap.Time).Titled("Time").Formatted("{0:t}");
            columns.Add(ap => ap.Customer.Name).Titled("Customer");
            columns.Add(ap => ap.Staff.Name).Titled("Staff");
            columns.Add(ap => ap.IsDone).Titled("Done?")
                .RenderedAs(ap => (ap.IsDone == true ? "Yes" : "No"))
                .UsingFilterOptions(new[]
                {
                    new SelectListItem{ Value = "true", Text = "Yes" },
                    new SelectListItem{ Value = "false", Text = "No" }
                });

            columns.Add(ap => Html.ActionLink("Edit", "Edit", new { id = ap.ID }, new { @class = "btn btn-primary" }));
            @* columns.Add(Model => Model.ID).RendeedAs(Model =>
                Html.ActionLink("Edit", "Edit", new { id = Model.ID })).Css("btn")
            *@
            columns.Add(ap =>
                Html.ActionLink("Delete", "Delete", new { id = ap.ID }, new { @class = "btn btn-primary" }));

        })
        .Filterable()
        .Sortable()
)

